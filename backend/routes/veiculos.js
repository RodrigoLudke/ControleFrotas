import express from "express";
import pkg from "@prisma/client";

import { autenticarToken, autorizarRoles } from "../index.js";

const { PrismaClient } = pkg;
const prisma = new PrismaClient();
const router = express.Router();

// Listar ve칤culos do usu치rio logado
router.get("/me", autenticarToken, async (req, res) => {
    try {
        const userId = req.user.id;

        const veiculos = await prisma.userVeiculo.findMany({
            where: { userId: parseInt(userId) },
            include: { veiculo: true },
        });

        res.json(veiculos.map(v => v.veiculo));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Erro ao buscar ve칤culos" });
    }
});
// Rota para cadastrar um novo ve칤culo e associ치-lo ao usu치rio logado
// 游댳 Rota atualizada para criar um novo ve칤culo e associar a m칰ltiplos motoristas
router.post("/", autenticarToken, autorizarRoles("ADMIN"), async (req, res) => {
    try {
        const { nome, tipo, motoristasIds } = req.body;

        if (!nome || !tipo) {
            return res.status(400).json({ error: "Nome e tipo do ve칤culo s칚o obrigat칩rios." });
        }

        if (!motoristasIds || !Array.isArray(motoristasIds) || motoristasIds.length === 0) {
            return res.status(400).json({ error: "칄 necess치rio fornecer ao menos um motorista para associar ao ve칤culo." });
        }

        // 1. Cria o novo ve칤culo na tabela `Veiculo`
        const novoVeiculo = await prisma.veiculo.create({
            data: {
                nome,
                tipo,
            },
        });

        // 2. Associa o ve칤culo aos motoristas
        const veiculosMotoristas = motoristasIds.map(motoristaId => ({
            userId: motoristaId,
            veiculoId: novoVeiculo.id,
        }));

        await prisma.userVeiculo.createMany({
            data: veiculosMotoristas,
            skipDuplicates: true, // Para evitar erros caso um motorista j치 esteja associado
        });

        res.status(201).json({ message: "Ve칤culo cadastrado e associado com sucesso!", veiculo: novoVeiculo });
    } catch (error) {
        console.error("Erro ao registrar ve칤culo:", error);
        res.status(500).json({ error: "Erro interno do servidor." });
    }
});

export default router;