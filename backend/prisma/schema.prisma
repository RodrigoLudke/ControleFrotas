datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id              Int       @id @default(autoincrement())
    email           String    @unique
    senha           String
    nome            String?
    cpf             String?   @unique
    rg              String?   @unique
    cnh             String?   @unique
    validadeCnh     DateTime?
    telefone        String?
    endereco        String?
    dataContratacao DateTime?
    salario         Decimal?  @db.Decimal(10, 2)
    observacoes     String?
    categoria       CNHCategory[] @default([])
    status          String    @default("ativo")
    dataNascimento  DateTime?

    veiculos      UserVeiculo[]
    viagens       Viagem[]
    manutencoes   Manutencao[]
    abastecimentos Abastecimento[]
    alertas       Alerta[]
    refreshTokens RefreshToken[]
    role          Role          @default(USER)
}

model Veiculo {
    id               Int            @id @default(autoincrement())
    placa            String         @unique
    marca            String?
    modelo           String
    ano              Int
    cor              String
    chassi           String         @unique
    renavam          String         @unique
    capacidade       Int
    quilometragem    Int
    combustivel      Combustivel
    valorCompra      Decimal        @db.Decimal(10, 2)
    dataCompra       DateTime
    seguradora       String?
    apoliceSeguro    String?
    validadeSeguro   DateTime?
    observacoes      String?
    status           VeiculoStatus  @default(disponivel)

    categoria        CNHCategory?

    usuarios  UserVeiculo[]
    viagens   Viagem[]
    manutencoes   Manutencao[]
    abastecimentos Abastecimento[]
    alertas   Alerta[]
}

model UserVeiculo {
  id        Int   @id @default(autoincrement())
  userId    Int
  veiculoId Int

  user     User    @relation(fields: [userId], references: [id])
  veiculo  Veiculo @relation(fields: [veiculoId], references: [id])
}

model Viagem {
  id             Int      @id @default(autoincrement())
  userId         Int
  veiculoId      Int

  dataSaida      DateTime
  dataChegada    DateTime

  finalidade     String
  kmFinal        Int

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User    @relation(fields: [userId], references: [id])
  veiculo  Veiculo @relation(fields: [veiculoId], references: [id])
}

model Abastecimento {
  id            Int         @id @default(autoincrement())
  veiculoId     Int
  veiculo       Veiculo     @relation(fields: [veiculoId], references: [id])
  userId   Int
  user     User        @relation(fields: [userId], references: [id])
  data          DateTime
  quilometragem Int
  litros        Decimal     @db.Decimal(10, 3)
  valorPorLitro Decimal     @db.Decimal(10, 3)
  custoTotal    Decimal     @db.Decimal(10, 2)
  combustivel   Combustivel // Reutilizando o enum que você já tem
  posto         String?     // Nome do posto de combustível
}

model Manutencao {
  id            Int                @id @default(autoincrement())
  veiculoId     Int
  veiculo       Veiculo            @relation(fields: [veiculoId], references: [id])
  userId   Int? // Motorista que solicitou ou realizou
  user     User?              @relation(fields: [userId], references: [id])
  data          DateTime
  quilometragem Int
  tipo          TipoManutencao     // Preventiva, Corretiva
  descricao     String             @db.Text
  custo         Decimal?           @db.Decimal(10, 2)
  local         String?            // Nome da oficina
  observacoes   String?            @db.Text
  status        StatusManutencao   // Agendada, Em Andamento, Concluída
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Alerta {
  id         Int       @id @default(autoincrement())
  userId     Int
  veiculoId  Int
  mensagem   String    @db.Text
  tipo       AlertaTipo @default(SOLICITACAO) // SOLICITACAO | REGISTRO_RAPIDO
  status     AlertaStatus @default(PENDENTE)  // PENDENTE | APROVADO | REPROVADO
  createdAt  DateTime  @default(now())

  user     User    @relation(fields: [userId], references: [id])
  veiculo  Veiculo @relation(fields: [veiculoId], references: [id])
}

enum AlertaTipo {
  SOLICITACAO
  REGISTRO_RAPIDO
}

enum AlertaStatus {
  PENDENTE
  APROVADO
  REPROVADO
}

enum TipoManutencao {
  PREVENTIVA
  CORRETIVA
}

enum StatusManutencao {
  AGENDADA
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
}


enum Role {
  ADMIN
  USER
}

enum VeiculoStatus {
  disponivel
  em_uso
  manutencao
  inativo
}

enum Combustivel {
  gasolina
  alcool
  flex
  diesel
  eletrico
  hibrido
}

enum CNHCategory {
  A
  B
  AB
  C
  D
  E
}


